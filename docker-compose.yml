services:
    # PostgreSQL Database
    postgres:
        image: postgres:15-alpine
        container_name: kitchen-pal-db
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-kitchen_pal}
            POSTGRES_USER: ${POSTGRES_USER:-kitchen_pal_user}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kitchen_pal_password}
            PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
            - ./database/fix-password.sql:/docker-entrypoint-initdb.d/02-fix-password.sql:ro
        ports:
            - "5433:5432"
        networks:
            kitchen-pal-network:
                ipv4_address: 172.20.0.4
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER:-kitchen_pal_user} -d ${POSTGRES_DB:-kitchen_pal}",
                ]
            interval: 10s
            timeout: 5s
            retries: 5

    # pgAdmin 4 for Database Management
    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: kitchen-pal-pgadmin
        restart: unless-stopped
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@gmail.com}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
            PGADMIN_CONFIG_SERVER_MODE: "True"
            PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
        volumes:
            - pgadmin_data:/var/lib/pgadmin
            - ./database/servers.json:/pgadmin4/servers.json:ro
            - ./database/pgpass:/pgadmin4/pgpass:ro
        ports:
            - "5050:80"
        networks:
            kitchen-pal-network:
                ipv4_address: 172.20.0.7
        depends_on:
            postgres:
                condition: service_healthy

    # Kitchen Pal Backend API
    backend:
        build:
            context: .
            dockerfile: Dockerfile.backend
        container_name: kitchen-pal-backend
        restart: unless-stopped
        environment:
            NODE_ENV: production
            API_PORT: 3004
            DATABASE_URL: postgresql://${POSTGRES_USER:-kitchen_pal_user}:${POSTGRES_PASSWORD:-kitchen_pal_password}@postgres:5432/${POSTGRES_DB:-kitchen_pal}
            JWT_SECRET: ${JWT_SECRET:-development_jwt_secret_change_in_production}
            JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-development_refresh_secret_change_in_production}
            FRONTEND_URL: https://${DOMAIN:-kitchen-pal.kwakwakwak.com}
            GEMINI_API_KEY: ${GEMINI_API_KEY:-}
            REQUIRE_EMAIL_VERIFICATION: ${REQUIRE_EMAIL_VERIFICATION:-false}
            # Email configuration for production
            SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
            SMTP_PORT: ${SMTP_PORT:-587}
            SMTP_USER: ${SMTP_USER:-}
            SMTP_PASS: ${SMTP_PASS:-}
            FROM_EMAIL: ${FROM_EMAIL:-noreply@kitchen-pal.kwakwakwak.com}
        networks:
            - kitchen-pal-network
        depends_on:
            postgres:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Kitchen Pal Frontend Application
    frontend:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                VITE_API_URL: "" # Empty means same-origin requests
        container_name: kitchen-pal-frontend
        restart: unless-stopped
        environment:
            NODE_ENV: production
        networks:
            - kitchen-pal-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3000/"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Recipe Proxy Server for CORS handling
    recipe-proxy:
        build:
            context: .
            dockerfile: Dockerfile.proxy
        container_name: kitchen-pal-proxy
        restart: unless-stopped
        environment:
            NODE_ENV: production
        ports:
            - "3001:3001"
        networks:
            - kitchen-pal-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Nginx Reverse Proxy
    nginx:
        image: nginx:alpine
        container_name: kitchen-pal-nginx
        restart: unless-stopped
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/ssl:/etc/nginx/ssl:ro
        ports:
            - "8080:80"
            - "8443:443"
        networks:
            - kitchen-pal-network
        depends_on:
            - frontend
            - backend
        healthcheck:
            test: ["CMD", "nginx", "-t"]
            interval: 30s
            timeout: 5s
            retries: 3

    # Cloudflare Tunnel
    cloudflared:
        image: cloudflare/cloudflared:latest
        container_name: kitchen-pal-tunnel
        restart: unless-stopped
        command: tunnel run --token ${CLOUDFLARE_TUNNEL_TOKEN}
        environment:
            TUNNEL_TOKEN: ${CLOUDFLARE_TUNNEL_TOKEN}
        networks:
            - kitchen-pal-network
        depends_on:
            - nginx

    # Redis for Session Management (Optional but recommended)
    redis:
        image: redis:7-alpine
        container_name: kitchen-pal-redis
        restart: unless-stopped
        command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_dev_password}
        volumes:
            - redis_data:/data
        ports:
            - "6379:6379"
        networks:
            - kitchen-pal-network
        healthcheck:
            test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
            interval: 30s
            timeout: 5s
            retries: 3

volumes:
    postgres_data:
        driver: local
    pgadmin_data:
        driver: local
    redis_data:
        driver: local

networks:
    kitchen-pal-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16
